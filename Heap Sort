def max_heapify(arr, n, i):
    largest = i
    left = 2 * i + 1
    right = 2 * i + 2

    # Check if left child exists and is greater
    if left < n and arr[left] > arr[largest]:
        largest = left

    # Check if right child exists and is greater
    if right < n and arr[right] > arr[largest]:
        largest = right

    # If the largest is not the root
    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]
        max_heapify(arr, n, largest)


def build_max_heap(arr):
    n = len(arr)
    # Start from the last non-leaf node
    for i in range(n // 2 - 1, -1, -1):
        max_heapify(arr, n, i)


def heap_sort(arr):
    n = len(arr)

    # Step 1: Build a max heap
    build_max_heap(arr)

    # Step 2: Extract elements from the heap
    for i in range(n - 1, 0, -1):
        # Swap the current root with the last element
        arr[0], arr[i] = arr[i], arr[0]

        # Call max_heapify on the reduced heap
        max_heapify(arr, i, 0)


# Example usage:
arr = [4, 10, 3, 5, 1]
print("Original array:", arr)
heap_sort(arr)
print("Sorted array:", arr)
