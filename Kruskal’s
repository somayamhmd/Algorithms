# Class to represent an edge in the graph
class Edge:
    def __init__(self, src, dest, weight):
        self.src = src
        self.dest = dest
        self.weight = weight

    def __lt__(self, other):
        return self.weight < other.weight  # For sorting edges by weight


# Union-Find Data Structure
class UnionFind:
    def __init__(self, n):
        self.parent = [i for i in range(n)]  # Parent array
        self.rank = [0] * n  # Rank array

    def find_set(self, node):
        if self.parent[node] != node:
            self.parent[node] = self.find_set(self.parent[node])  # Path compression
        return self.parent[node]

    def union(self, u, v):
        root_u = self.find_set(u)
        root_v = self.find_set(v)

        if root_u != root_v:
            # Union by rank
            if self.rank[root_u] < self.rank[root_v]:
                self.parent[root_u] = root_v
            elif self.rank[root_u] > self.rank[root_v]:
                self.parent[root_v] = root_u
            else:
                self.parent[root_v] = root_u
                self.rank[root_u] += 1


# Kruskal's Algorithm
def kruskal_mst(vertices, edges):
    # Step 1: Sort edges by weight in non-decreasing order
    edges.sort()

    # Step 2: Initialize MST as an empty set
    mst = []
    uf = UnionFind(vertices)  # Initialize Union-Find structure

    # Step 3: Process each edge in sorted order
    for edge in edges:
        # If including this edge doesn't form a cycle
        if uf.find_set(edge.src) != uf.find_set(edge.dest):
            mst.append(edge)  # Add edge to MST
            uf.union(edge.src, edge.dest)  # Union the sets of the two vertices

    return mst


# Example Usage
if __name__ == "__main__":
    # Number of vertices and edges
    vertices = 5
    edges = [
        Edge(0, 1, 10),
        Edge(0, 2, 6),
        Edge(0, 3, 5),
        Edge(1, 3, 15),
        Edge(2, 3, 4)
    ]

    # Find MST using Kruskal's Algorithm
    mst = kruskal_mst(vertices, edges)

    # Print the edges in the MST
    print("Edges in the MST:")
    for edge in mst:
        print(f"({edge.src}, {edge.dest}) -> {edge.weight}")
